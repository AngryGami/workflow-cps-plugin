- array access (trivial, so can be done later)
- debug information and stack trace fixup
- "synchronized" block
- finally block
- how do we handle multi-threading?

Tests to be written:
    - verify a proper method overload resolution
    - trying to make constructor a workflow should be detected and rejected

Multi-threading TODO
- how to suspend just one thread while letting other threads run


-----------
How the fixed up stack trace element should look like

  synchronous part
  inserted async part
  ---------
  caller of Groovy CPS

For exception thrown from resume

  inserted async part
  ---------
  the original stack trace element of the exception

When suspending, the location of where the suspend call had happened should be remembered

  SuspendBlock.eval() can get that. This should include the complete stack trace
  so that resume() can do a proper fixup

Making 'throw' statement do the stack trace rewriting prevents proper rethrow handling
